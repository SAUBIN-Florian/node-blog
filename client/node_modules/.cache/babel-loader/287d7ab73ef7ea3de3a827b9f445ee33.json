{"ast":null,"code":"var _jsxFileName = \"/home/florian/code/SAUBIN-Florian/node-mongo-server/client/src/components/ShowPost.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Context } from '../context/Context';\nimport axios from 'axios';\nimport \"../styles/show.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowPost() {\n  _s();\n\n  const location = useLocation();\n  const path = location.pathname.split(\"/\")[2];\n  const [post, setPost] = useState({});\n  const {\n    user\n  } = useContext(Context);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n  const PUBLIC_FOLDER = \"http://localhost:5000/images/\";\n\n  const handleDelete = async () => {\n    try {\n      //need to send a \"data\" object with the username for the axios DELETE method\n      //or it's a 401 error \"Unauthorized\" !\n      await axios.delete(\"/posts/\" + path, {\n        data: {\n          username: user.username\n        }\n      });\n      window.location.replace(\"/\");\n    } catch (err) {}\n  };\n\n  const handleUpdate = async () => {\n    try {\n      await axios.put(\"/posts/\" + path);\n    } catch (err) {}\n  };\n\n  useEffect(() => {\n    const getPost = async () => {\n      const res = await axios.get(\"/posts/\" + path);\n      setPost(res.data.post);\n      setTitle(res.data.post.title);\n      setDescription(res.data.post.description);\n    };\n\n    getPost();\n  }, [path]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show-post\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"show-wrapper\",\n      children: [post.photo && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"show-img\",\n        src: PUBLIC_FOLDER + post.photo,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        className: \"show-title-update\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"show-title\",\n        children: [post.title, post.username === (user === null || user === void 0 ? void 0 : user.username) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"show-edit-delete\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"show-edit far fa-edit\",\n            onClick: () => setUpdateMode(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"show-delete far fa-trash-alt\",\n            onClick: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"show-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"show-info-author\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/?user=${post.username}`,\n            children: [\"Author: \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: post.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"show-info-date\",\n          children: new Date(post.createdAt).toDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        className: \"show-description-update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"show-description\",\n        children: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), updateMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"update-button\",\n        onClick: handleUpdate,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ShowPost, \"HKfu+07sCD2zCwG04MBPbKAapg0=\", false, function () {\n  return [useLocation];\n});\n\n_c = ShowPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowPost\");","map":{"version":3,"sources":["/home/florian/code/SAUBIN-Florian/node-mongo-server/client/src/components/ShowPost.jsx"],"names":["useState","useEffect","useContext","useLocation","Link","Context","axios","ShowPost","location","path","pathname","split","post","setPost","user","title","setTitle","description","setDescription","updateMode","setUpdateMode","PUBLIC_FOLDER","handleDelete","delete","data","username","window","replace","err","handleUpdate","put","getPost","res","get","photo","e","target","value","Date","createdAt","toDateString"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Context } from '../context/Context';\nimport axios from 'axios';\nimport \"../styles/show.css\";\n\nexport default function ShowPost() {\n  const location = useLocation();\n  const path = location.pathname.split(\"/\")[2];\n  const [post, setPost] = useState({});\n  const {user} = useContext(Context);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n  const PUBLIC_FOLDER = \"http://localhost:5000/images/\";\n\n  const handleDelete = async () => {\n    try{\n      //need to send a \"data\" object with the username for the axios DELETE method\n      //or it's a 401 error \"Unauthorized\" !\n      await axios.delete(\"/posts/\" + path, {data: {username: user.username}});\n      window.location.replace(\"/\");\n    }catch(err){}\n  }\n\n  const handleUpdate = async () => {\n    try{\n      await axios.put(\"/posts/\" + path)\n    }catch(err){}\n  }\n\n  useEffect(() => {\n    const getPost = async () => {\n      const res = await axios.get(\"/posts/\" + path);\n      setPost(res.data.post);\n      setTitle(res.data.post.title);\n      setDescription(res.data.post.description);\n    };\n    getPost();\n  }, [path])\n\n  return (\n    <div className=\"show-post\">\n      <div className=\"show-wrapper\">\n        {post.photo && \n          <img\n          className=\"show-img\" \n          src={PUBLIC_FOLDER + post.photo} \n          alt=\"\" \n          />\n        }\n        { updateMode ?\n          <input\n            type=\"text\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            className=\"show-title-update\"\n            autoFocus\n          />\n         : (\n            <h1 className=\"show-title\">\n              {post.title}\n              {post.username === user?.username && \n                <div className=\"show-edit-delete\">\n                  <i className=\"show-edit far fa-edit\" onClick={() => setUpdateMode(true)}></i>\n                  <i className=\"show-delete far fa-trash-alt\" onClick={handleDelete}></i>\n                </div>\n              }\n            </h1>\n          )\n        }\n        <div className=\"show-info\">\n          <span className=\"show-info-author\">\n            <Link to={`/?user=${post.username}`}>\n              Author: <b>{post.username}</b>\n            </Link>\n          </span>\n          <span className=\"show-info-date\">{new Date(post.createdAt).toDateString()}</span>\n        </div>\n        { updateMode ? \n          (\n            <textarea \n              type=\"text\"\n              value={description} \n              onChange={(e) => setDescription(e.target.value)} \n              className=\"show-description-update\"\n            />\n          ) : (\n            <div className=\"show-description\">\n              {post.description}\n            </div>\n          )\n        }\n        {updateMode && \n          <button className=\"update-button\" onClick={handleUpdate}>Update</button>\n        }\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}